//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestStarter.ChatServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IChatContract", CallbackContract=typeof(TestStarter.ChatServiceReference.IChatContractCallback))]
    public interface IChatContract {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/SendToMainChat")]
        void SendToMainChat(string sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/SendToMainChat")]
        System.Threading.Tasks.Task SendToMainChatAsync(string sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/SendToPersonalChat")]
        void SendToPersonalChat(string sender, string reciever, string message, bool sendToSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/SendToPersonalChat")]
        System.Threading.Tasks.Task SendToPersonalChatAsync(string sender, string reciever, string message, bool sendToSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/IamIn")]
        void IamIn(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/IamIn")]
        System.Threading.Tasks.Task IamInAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/RefreshMainChat")]
        void RefreshMainChat(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/RefreshPersonalChat")]
        void RefreshPersonalChat(string name, string message, bool finished);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/RefreshClientList")]
        void RefreshClientList(string name, bool quitted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatContract/FullRefreshClientList")]
        void FullRefreshClientList(string[] names);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatContractChannel : TestStarter.ChatServiceReference.IChatContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatContractClient : System.ServiceModel.DuplexClientBase<TestStarter.ChatServiceReference.IChatContract>, TestStarter.ChatServiceReference.IChatContract {
        
        public ChatContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendToMainChat(string sender, string message) {
            base.Channel.SendToMainChat(sender, message);
        }
        
        public System.Threading.Tasks.Task SendToMainChatAsync(string sender, string message) {
            return base.Channel.SendToMainChatAsync(sender, message);
        }
        
        public void SendToPersonalChat(string sender, string reciever, string message, bool sendToSender) {
            base.Channel.SendToPersonalChat(sender, reciever, message, sendToSender);
        }
        
        public System.Threading.Tasks.Task SendToPersonalChatAsync(string sender, string reciever, string message, bool sendToSender) {
            return base.Channel.SendToPersonalChatAsync(sender, reciever, message, sendToSender);
        }
        
        public void IamIn(string name) {
            base.Channel.IamIn(name);
        }
        
        public System.Threading.Tasks.Task IamInAsync(string name) {
            return base.Channel.IamInAsync(name);
        }
    }
}
